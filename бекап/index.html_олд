<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Assistant (Single File)</title>
    <style>
        /* --- –°–û–î–ï–†–ñ–ò–ú–û–ï styles.css --- */
        /* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f7f6;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .app-container {
            width: 95%;
            max-width: 1400px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 90vh; /* –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É */
        }

        /* –®–∞–ø–∫–∞ */
        .app-header {
            background-color: #4a90e2;
            color: white;
            padding: 15px 25px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .app-header h1 {
            margin: 0;
            font-size: 1.5em;
        }

        .notifications {
            min-height: 20px;
            font-size: 0.9em;
        }

        .notification {
            padding: 5px 10px;
            border-radius: 4px;
            margin-left: 10px;
            color: white;
            display: inline-block; /* –ß—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ */
        }
        .notification.success { background-color: #4CAF50; }
        .notification.error { background-color: #f44336; }
        .notification.warning { background-color: #ff9800; color: #333; }

        /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */
        .app-main {
            display: flex;
            flex-grow: 1;
            overflow: hidden; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã—Ö–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
        }

        /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä) */
        .sidebar {
            width: 250px;
            background-color: #e9ecef;
            padding: 15px;
            border-right: 1px solid #d1dbe5;
            display: flex;
            flex-direction: column;
            overflow-y: auto; /* –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä */
        }

        .sidebar h2 {
            margin-top: 0;
            font-size: 1.2em;
            color: #4a5568;
            border-bottom: 1px solid #ccc;
            padding-bottom: 10px;
        }

        .directory-controls {
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 5px;
            flex-wrap: wrap;
        }
        #current-path {
            font-weight: bold;
            word-break: break-all; /* –ü–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π */
        }

        #file-list {
            list-style: none;
            padding: 0;
            margin: 0;
            flex-grow: 1;
        }

        #file-list li {
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 4px;
            margin-bottom: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background-color 0.2s ease;
            white-space: nowrap; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ */
            overflow: hidden;
            text-overflow: ellipsis; /* –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è */
        }

        #file-list li:hover {
            background-color: #d1dbe5;
        }

        #file-list li.loading {
            font-style: italic;
            color: #666;
        }
        #file-list li.error { color: #f44336; }

        #file-list li.directory::before {
            content: 'üìÅ'; /* –ò–∫–æ–Ω–∫–∞ –ø–∞–ø–∫–∏ */
            margin-right: 8px;
            font-size: 1.1em;
            flex-shrink: 0;
        }
        #file-list li.file::before {
            content: 'üìÑ'; /* –ò–∫–æ–Ω–∫–∞ —Ñ–∞–π–ª–∞ */
            margin-right: 8px;
            flex-shrink: 0;
        }

        /* –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
        .content-area {
            flex-grow: 1;
            display: flex;
            flex-direction: column; /* –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ */
            padding: 20px;
            background-color: #fdfdfd;
            overflow-y: auto; /* –°–∫—Ä–æ–ª–ª –¥–ª—è –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏ */
        }

        /* –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫/—Ä–µ–¥–∞–∫—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ */
        .file-viewer {
            flex-grow: 1; /* –ó–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ */
            display: flex;
            flex-direction: column;
            margin-bottom: 20px; /* –û—Ç—Å—Ç—É–ø –æ—Ç —á–∞—Ç–∞ */
            min-height: 250px; /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ */
        }

        .file-viewer h2 {
            margin-top: 0;
            font-size: 1.2em;
            color: #4a5568;
        }

        #file-info {
            margin-bottom: 10px;
            color: #555;
            background: #eee;
            padding: 5px 8px;
            border-radius: 3px;
            min-height: 20px;
            font-size: 0.9em;
        }

        #file-content-editor {
            width: 100%;
            flex-grow: 1; /* –ü–æ–∑–≤–æ–ª—è–µ—Ç textarea —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è */
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            font-family: 'Courier New', Courier, monospace;
            font-size: 0.95em;
            box-sizing: border-box; /* –£—á–∏—Ç—ã–≤–∞–µ–º padding –∏ border –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö */
            min-height: 150px; /* –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ */
            resize: vertical; /* –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ */
        }

        .file-actions {
            margin-top: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        #file-status {
            font-size: 0.9em;
            color: #666;
            margin-left: auto; /* –ü—Ä–∏–∂–∏–º–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é */
        }

        .config-display {
            margin-top: 15px;
            border-top: 1px solid #eee;
            padding-top: 10px;
        }
        .config-display h3 { margin-top: 0; font-size: 1em; }
        .config-display pre {
            background-color: #f0f0f0;
            padding: 10px;
            border-radius: 4px;
            white-space: pre-wrap;
            word-wrap: break-word;
            max-height: 150px; /* –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º */
            overflow-y: auto;
            font-size: 0.9em;
        }

        /* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ */
        .chat-interface {
            border-top: 1px solid #e0e0e0;
            padding-top: 20px;
            display: flex;
            flex-direction: column;
            min-height: 200px; /* –ú–∏–Ω. –≤—ã—Å–æ—Ç–∞ —á–∞—Ç–∞ */
            flex-shrink: 0; /* –ù–µ —Å–∂–∏–º–∞—Ç—å—Å—è */
        }

        .chat-interface h2 {
            margin-top: 0;
            font-size: 1.2em;
            color: #4a5568;
        }

        #chat-history {
            flex-grow: 1;
            overflow-y: auto;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 10px;
            min-height: 100px;
            background-color: #f9f9f9;
        }

        .chat-message {
            margin-bottom: 8px;
            padding: 6px 12px;
            border-radius: 15px;
            max-width: 85%;
            word-wrap: break-word;
            line-height: 1.4;
        }

        .chat-message.user {
            background-color: #dcf8c6;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .chat-message.agent {
            background-color: #e1f5fe;
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }
         .chat-message.error {
            background-color: #ffebee;
            color: #c62828;
             margin-right: auto;
            border-bottom-left-radius: 5px;
            font-style: italic;
         }

        .chat-message .sender {
            font-weight: bold;
            font-size: 0.8em;
            margin-bottom: 3px;
            color: #555;
        }
        .chat-message .timestamp {
            font-size: 0.7em;
            color: #999;
            margin-top: 4px;
            text-align: right;
            display: block; /* –ß—Ç–æ–±—ã –±—ã–ª –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ */
        }


        .chat-input-area {
             display: flex;
             flex-direction: column; /* –ü–æ–ª–µ –¥–ª—è –∫–ª—é—á–∞ –Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ */
             gap: 5px;
        }

        .api-key-area {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.85em;
        }
         .api-key-area label {
            flex-shrink: 0;
         }
         #api-key-input {
             flex-grow: 1;
             padding: 4px 8px;
             border: 1px solid #ccc;
             border-radius: 4px;
             font-size: 0.9em;
         }

        .chat-input {
            display: flex;
            gap: 10px;
        }

        #chat-message-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 20px;
        }

        /* –ü–æ–¥–≤–∞–ª */
        .app-footer {
            background-color: #f8f9fa;
            color: #6c757d;
            padding: 10px 25px;
            text-align: center;
            font-size: 0.9em;
            border-top: 1px solid #e0e0e0;
            flex-shrink: 0; /* –ù–µ —Å–∂–∏–º–∞—Ç—å—Å—è */
        }

        /* –ö–Ω–æ–ø–∫–∏ */
        button {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            background-color: #4a90e2;
            color: white;
            cursor: pointer;
            transition: background-color 0.2s ease, box-shadow 0.2s ease;
            font-size: 0.9em;
        }

        button:hover:not(:disabled) {
            background-color: #357abd;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        button:active:not(:disabled) {
            background-color: #2a6ca4;
        }

        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            box-shadow: none;
        }

        #btn-root, #btn-create-file {
            padding: 5px 10px;
        }
        #btn-create-file {
            background-color: #5cb85c;
        }
        #btn-create-file:hover:not(:disabled) {
            background-color: #4cae4c;
        }
        #btn-delete-file {
            background-color: #d9534f;
        }
        #btn-delete-file:hover:not(:disabled) {
            background-color: #c9302c;
        }
        #btn-send-message {
            flex-shrink: 0; /* –ù–µ —Å–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ */
        }
    </style>
</head>
<body>
    <div class="app-container">
        <header class="app-header">
            <h1>Smart Assistant (SF)</h1>
            <div id="notifications" class="notifications"></div>
        </header>

        <main class="app-main">
            <aside class="sidebar file-explorer">
                <h2>–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä</h2>
                <div class="directory-controls">
                    <button id="btn-root" title="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–µ–Ω—å">/ –ö–æ—Ä–Ω–µ–≤–∞—è</button>
                    <button id="btn-create-file" title="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ">+</button>
                 </div>
                 <div id="current-path" style="word-break: break-all; font-weight: bold; margin: 5px 0; font-size: 0.9em;">/</div>
                <ul id="file-list">
                    <!-- –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç –∑–¥–µ—Å—å -->
                    <li class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</li>
                </ul>
            </aside>

            <section class="content-area">
                <div id="file-viewer" class="file-viewer">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                       <h2 style="margin: 0;">–ü—Ä–æ—Å–º–æ—Ç—Ä / –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
                       <span id="file-status"></span>
                   </div>
                    <div id="file-info">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</div>
                    <textarea id="file-content-editor" placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞..." disabled></textarea>
                    <div class="file-actions">
                        <button id="btn-save-file" disabled>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button id="btn-delete-file" disabled>–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                     <div id="agent-config-display" class="config-display" style="display: none;">
                        <h3>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ê–∫—Ç–∏–≤–Ω–æ–≥–æ –ê–≥–µ–Ω—Ç–∞ (–∏–∑ —Ñ–∞–π–ª–∞):</h3>
                        <pre id="agent-config-data"></pre>
                    </div>
                </div>

                <div id="chat-interface" class="chat-interface">
                    <h2>–ß–∞—Ç —Å –ê–≥–µ–Ω—Ç–æ–º (VseGPT API)</h2>
                    <div id="chat-history">
                        <div class="chat-message agent">
                            <div class="sender">–ê–≥–µ–Ω—Ç</div>
                            <div>–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —á–∞—Ç–∞ –≤ /chats/ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π. –ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</div>
                            <div class="timestamp"></div>
                        </div>
                     </div>
                     <div class="chat-input-area">
                         <div class="api-key-area">
                             <label for="api-key-input">VseGPT API –ö–ª—é—á:</label>
                            <input type="password" id="api-key-input" placeholder="sk-...">
                         </div>
                         <div class="chat-input">
                            <input type="text" id="chat-message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." disabled>
                            <button id="btn-send-message" disabled>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                         </div>
                    </div>
                </div>
            </section>
        </main>

        <footer class="app-footer">
            <p>Smart Assistant (Single File) ¬© 2024</p>
        </footer>
    </div>

    <!-- ================================= SCRIPT ================================= -->
    <script>
        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å –∫–æ–¥ –≤ IIFE –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (—Ö–æ—Ç—è –≤ single file —ç—Ç–æ –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        (async () => {
            console.log('Smart Assistant (SF): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

            // --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ DOM –≠–ª–µ–º–µ–Ω—Ç—ã (–¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤—Å–µ–º —Å–∫—Ä–∏–ø—Ç–µ) ---
            const fileListElement = document.getElementById('file-list');
            const fileContentEditor = document.getElementById('file-content-editor');
            const fileInfoElement = document.getElementById('file-info');
            const fileStatusElement = document.getElementById('file-status');
            const saveButton = document.getElementById('btn-save-file');
            const deleteButton = document.getElementById('btn-delete-file');
            const notificationsElement = document.getElementById('notifications');
            const currentPathElement = document.getElementById('current-path');
            const rootButton = document.getElementById('btn-root');
            const createFileButton = document.getElementById('btn-create-file');
            const agentConfigDisplay = document.getElementById('agent-config-display');
            const agentConfigData = document.getElementById('agent-config-data');
            const chatHistoryElement = document.getElementById('chat-history');
            const chatMessageInput = document.getElementById('chat-message-input');
            const sendMessageButton = document.getElementById('btn-send-message');
            const apiKeyInput = document.getElementById('api-key-input');

            // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
            let currentDirectory = '/';
            let selectedFilePath = null;
            let isEditorDirty = false;
            let currentChatFile = null; // { filePath: string, messages: Array<object> }
            let activeAgentConfig = null; // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–∏–∑ —Ñ–∞–π–ª–∞)

            // ----------------------------------------------------------------------
            // --- Utils ---
            // ----------------------------------------------------------------------
            const Utils = {
                generateId: () => 'id_' + Date.now() + '_' + Math.random().toString(36).substring(2, 9),
                formatTimestamp: (timestamp) => {
                    try {
                        const date = new Date(timestamp);
                        if (isNaN(date.getTime())) return ''; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –º–µ—Ç–∫–∏
                        return date.toLocaleString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    } catch (e) { return ''; }
                },
                getFileName: (filePath) => {
                    if (!filePath || typeof filePath !== 'string') return '';
                    const parts = filePath.split('/');
                    return parts[parts.length - 1];
                },
                getDirectory: (filePath) => {
                    if (!filePath || typeof filePath !== 'string') return '/';
                    const lastSlashIndex = filePath.lastIndexOf('/');
                    return lastSlashIndex <= 0 ? '/' : filePath.substring(0, lastSlashIndex + 1);
                },
                createBackupPath: (fileData) => {
                    const timestampSuffix = new Date(fileData.timestamp).toISOString().replace(/[:.]/g, '-');
                    const nameParts = fileData.name.split('.');
                    const extension = nameParts.length > 1 ? '.' + nameParts.pop() : '';
                    const baseName = nameParts.join('.');
                    const backupName = `${baseName}_${timestampSuffix}${extension}`;
                    return `/backup/${backupName}`;
                }
            };

            // ----------------------------------------------------------------------
            // --- DB Manager (IndexedDB) ---
            // ----------------------------------------------------------------------
            const DBManager = (() => {
                const DB_NAME = 'smartAssistantDB_SF'; // –ù–æ–≤–æ–µ –∏–º—è –¥–ª—è single file –≤–µ—Ä—Å–∏–∏
                const DB_VERSION = 1; // –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—è–µ—Ç—Å—è
                const STORE_NAME = 'files';
                let db = null;

                /** –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç */
                function addInitialData(store) {
                     console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
                     const now = Date.now();
                     const initialFiles = [
                         {
                             filePath: '/chats/welcome.json', directory: '/chats/', name: 'welcome.json', timestamp: now,
                             content: JSON.stringify({
                                 id: Utils.generateId(),
                                 messages: [{ sender: 'agent', text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —á–∞—Ç–∞.', timestamp: now }]
                             }, null, 2)
                         },
                         {
                             filePath: '/agents/example-agent.json', directory: '/agents/', name: 'example-agent.json', timestamp: now,
                             content: JSON.stringify({
                                 id: 'agent_example_1', name: 'Example Agent',
                                 configurations: { model: 'anthropic/claude-3-haiku', temperature: 0.7, greeting: 'Hello from Example Agent!' }
                             }, null, 2)
                         },
                         {
                            filePath: '/agents/openai-gpt4o.json', directory: '/agents/', name: 'openai-gpt4o.json', timestamp: now,
                            content: JSON.stringify({
                                id: 'agent_openai_01', name: 'OpenAI GPT-4o',
                                configurations: { model: 'openai/gpt-4o', temperature: 0.8, max_tokens: 3000 }
                            }, null, 2)
                        },
                         {
                             filePath: '/secrets/sample-credentials.json', directory: '/secrets/', name: 'sample-credentials.json', timestamp: now,
                             content: JSON.stringify({ // –ë–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!
                                 id: 'secret_1', service: 'MyService', username: 'user', notes: 'Store API keys or other secrets here.'
                             }, null, 2)
                         }
                     ];

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.all –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    const putPromises = initialFiles.map(fileData => {
                         return new Promise((resolve, reject) => {
                             // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å
                             const getRequest = store.get(fileData.filePath);
                             getRequest.onsuccess = (event) => {
                                 if (!event.target.result) { // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
                                     const putRequest = store.put(fileData);
                                     putRequest.onsuccess = () => {
                                         console.log(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${fileData.filePath}`);
                                         resolve();
                                     };
                                     putRequest.onerror = (e) => {
                                         console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${fileData.filePath}:`, e.target.error);
                                         reject(e.target.error); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º Promise.all –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                     };
                                 } else {
                                     // –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                                    console.log(`–ù–∞—á–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fileData.filePath}`);
                                     resolve();
                                 }
                             };
                             getRequest.onerror = (e) => { // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
                                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${fileData.filePath}:`, e.target.error);
                                reject(e.target.error);
                            };
                         });
                     });

                     return Promise.all(putPromises); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
                 }


                function openDB() {
                    return new Promise((resolve, reject) => {
                        if (db) { resolve(db); return; }
                        const request = indexedDB.open(DB_NAME, DB_VERSION);

                        request.onerror = (event) => {
                            console.error(`[DB] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:`, event.target.error);
                            reject(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ${event.target.error}`);
                        };

                        request.onsuccess = (event) => {
                            db = event.target.result;
                            console.log(`[DB] –ë–∞–∑–∞ ${DB_NAME} v${DB_VERSION} –æ—Ç–∫—Ä—ã—Ç–∞.`);
                            db.onerror = (e) => console.error(`[DB] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:`, e.target.error);
                            resolve(db);
                        };

                        request.onupgradeneeded = async (event) => {
                            console.log(`[DB] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ v${DB_VERSION}...`);
                            const tempDb = event.target.result;
                            const transaction = event.target.transaction; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            let store;

                            if (!tempDb.objectStoreNames.contains(STORE_NAME)) {
                                console.log(`[DB] –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${STORE_NAME}`);
                                store = tempDb.createObjectStore(STORE_NAME, { keyPath: 'filePath' });
                                store.createIndex('directoryIndex', 'directory', { unique: false });
                                console.log(`[DB] –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω—ã.`);
                           } else {
                                console.log(`[DB] –•—Ä–∞–Ω–∏–ª–∏—â–µ ${STORE_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
                               store = transaction.objectStore(STORE_NAME); // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
                           }

                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            try {
                                // –í–∞–∂–Ω–æ: addInitialData —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É get)
                                // –í onupgradeneeded –ø—Ä–æ–º–∏—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º–∏, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `await` –≤–Ω—É—Ç—Ä–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ,
                                // –Ω–æ —Ç.–∫. addInitialData —Ç–µ–ø–µ—Ä—å —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç get, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å store.put
                                // –ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º addInitialData, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–ª—è onupgradeneeded

                                console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–Ω—É—Ç—Ä–∏ onupgradeneeded)...");
                                const now = Date.now();
                                const initialFiles = [
                                    // ... (–∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–∞–∫ –≤—ã—à–µ)
                                    { filePath: '/chats/welcome.json', directory: '/chats/', name: 'welcome.json', timestamp: now, content: JSON.stringify({ id: Utils.generateId(), messages: [{ sender: 'agent', text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —á–∞—Ç–∞.', timestamp: now }] }, null, 2) },
                                    { filePath: '/agents/example-agent.json', directory: '/agents/', name: 'example-agent.json', timestamp: now, content: JSON.stringify({ id: 'agent_example_1', name: 'Example Agent', configurations: { model: 'anthropic/claude-3-haiku', temperature: 0.7, greeting: 'Hello!' } }, null, 2) },
                                    { filePath: '/agents/openai-gpt4o.json', directory: '/agents/', name: 'openai-gpt4o.json', timestamp: now, content: JSON.stringify({ id: 'agent_openai_01', name: 'OpenAI GPT-4o', configurations: { model: 'openai/gpt-4o', temperature: 0.8 } }, null, 2) },
                                    { filePath: '/secrets/sample-credentials.json', directory: '/secrets/', name: 'sample-credentials.json', timestamp: now, content: JSON.stringify({ id: 'secret_1', service: 'MyService', username: 'user', notes: 'API keys etc.' }, null, 2) }
                                ];

                                initialFiles.forEach(fileData => {
                                    // –í onupgradeneeded –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—Ç—å put/add –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ get,
                                    // –Ω–æ –Ω—É–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ try/catch –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
                                    try {
                                        store.add(fileData); // –ò—Å–ø–æ–ª—å–∑—É–µ–º add, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å
                                        console.log(`[DB Init] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: ${fileData.filePath}`);
                                    } catch (e) {
                                         // –û—à–∏–±–∫–∞ ConstraintError –æ–∂–∏–¥–∞–µ–º–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏, –Ω–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
                                         if (e.name === 'ConstraintError') {
                                             console.warn(`[DB Init] –§–∞–π–ª ${fileData.filePath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫.`);
                                         } else {
                                            console.error(`[DB Init] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${fileData.filePath}:`, e);
                                        }
                                    }
                                });
                                console.log("[DB Init] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.");

                            } catch (error) {
                                console.error("[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
                                event.target.transaction.abort(); // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                reject(error);
                                return;
                            }

                            // –í onupgradeneeded –Ω–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å resolve/reject –ø—Ä–æ–º–∏—Å–æ–≤, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å–∞–º–∞
                        };
                    });
                }

                function getDB() { return db; }

                return { openDB, getDB, STORE_NAME };
            })();

            // ----------------------------------------------------------------------
            // --- FileSystem API (–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å DB) ---
            // ----------------------------------------------------------------------
            const FileSystemAPI = (() => {
                async function openDB() {
                    try { return await DBManager.openDB(); }
                    catch (error) { console.error("API: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ë–î:", error); throw error; }
                }

                async function listFiles(directory) {
                    if (!directory.endsWith('/')) directory += '/';
                    if (directory === '//') directory = '/';
                    console.log(`API: listFiles –¥–ª—è ${directory}`);
                    const db = await openDB();
                    return new Promise((resolve, reject) => {
                        const transaction = db.transaction(DBManager.STORE_NAME, 'readonly');
                        const store = transaction.objectStore(DBManager.STORE_NAME);
                        const getAllRequest = store.getAll();
                        const items = new Map();

                        getAllRequest.onsuccess = (event) => {
                            const allFiles = event.target.result;
                             allFiles.forEach(file => {
                                 const fileDir = file.directory; // e.g., /chats/
                                 const filePath = file.filePath; // e.g., /chats/mychat.json

                                 // 1. –§–∞–π–ª—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                                 if (fileDir === directory) {
                                     items.set(filePath, { name: file.name, type: 'file', path: filePath });
                                 }
                                 // 2. –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                                 else if (fileDir.startsWith(directory) && fileDir !== directory) {
                                     // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                                     const relativePath = fileDir.substring(directory.length); // e.g., subdir1/subdir2/
                                     const dirName = relativePath.split('/')[0]; // e.g., subdir1
                                     if (dirName) {
                                         const dirPath = `${directory}${dirName}/`;
                                         if (!items.has(dirPath)) {
                                             items.set(dirPath, { name: dirName, type: 'directory', path: dirPath });
                                         }
                                     }
                                 }
                             });

                             const sortedItems = Array.from(items.values()).sort((a, b) => {
                                 if (a.type !== b.type) return a.type === 'directory' ? -1 : 1;
                                 return a.name.localeCompare(b.name);
                             });
                             resolve(sortedItems);
                        };
                        getAllRequest.onerror = (event) => {
                            console.error(`API: –û—à–∏–±–∫–∞ listFiles ${directory}:`, event.target.error);
                            reject(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ${event.target.error}`);
                        };
                    });
                }

                async function getFile(filePath) {
                    console.log(`API: getFile ${filePath}`);
                    const db = await openDB();
                    return new Promise((resolve, reject) => {
                        const transaction = db.transaction(DBManager.STORE_NAME, 'readonly');
                        const store = transaction.objectStore(DBManager.STORE_NAME);
                        const request = store.get(filePath);
                        request.onsuccess = (event) => {
                            const fileData = event.target.result;
                            // !!! –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ !!!
                            resolve(fileData || null);
                        };
                        request.onerror = (event) => {
                            console.error(`API: –û—à–∏–±–∫–∞ getFile ${filePath}:`, event.target.error);
                            reject(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${event.target.error}`);
                        };
                    });
                }

                async function saveFile(filePath, content) {
                    console.log(`API: saveFile ${filePath}`);
                    const db = await openDB();
                    const directory = Utils.getDirectory(filePath);
                    const name = Utils.getFileName(filePath);
                    const timestamp = Date.now();
                     // !!! –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ !!!
                    const processedContent = typeof content === 'string' ? content : JSON.stringify(content, null, 2);
                    const fileData = { filePath, directory, name, content: processedContent, timestamp };

                    return new Promise(async (resolve, reject) => {
                        const existingFile = await getFile(filePath).catch(() => null);
                        const performSaveTransaction = (backupDone = false) => {
                            const transaction = db.transaction(DBManager.STORE_NAME, 'readwrite');
                            const store = transaction.objectStore(DBManager.STORE_NAME);
                            const saveRequest = store.put(fileData);
                            transaction.oncomplete = () => {
                                console.log(`API: –§–∞–π–ª ${filePath} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
                                resolve(fileData); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                            };
                            transaction.onerror = (event) => {
                                console.error(`API: –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${filePath}:`, event.target.error);
                                reject(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${event.target.error}`);
                            };
                        };

                        if (existingFile && existingFile.content !== fileData.content && directory!=='/backup/') { // –ù–µ –±—ç–∫–∞–ø–∏–º –±—ç–∫–∞–ø—ã –∏ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                            console.log(`API: –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –¥–ª—è ${filePath}...`);
                            const backupPath = Utils.createBackupPath(existingFile);
                             // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞, –≤–∫–ª—é—á–∞—è –µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç (—É–∂–µ –Ω–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                            const backupData = { ...existingFile, filePath: backupPath, directory: '/backup/', name: Utils.getFileName(backupPath), timestamp: Date.now() };
                             // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
                             backupData.content = typeof backupData.content === 'string' ? backupData.content : JSON.stringify(backupData.content, null, 2);

                            const backupTransaction = db.transaction(DBManager.STORE_NAME, 'readwrite');
                            backupTransaction.objectStore(DBManager.STORE_NAME).put(backupData);
                            backupTransaction.oncomplete = () => {
                                console.log(`API: –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
                                performSaveTransaction(true);
                            };
                            backupTransaction.onerror = (event) => {
                                console.error(`API: –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ ${filePath}:`, event.target.error);
                                performSaveTransaction(false); // –í—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
                            };
                        } else {
                            performSaveTransaction(false);
                        }
                    });
                }

                async function deleteFile(filePath) {
                    console.log(`API: deleteFile ${filePath}`);
                    const db = await openDB();
                    return new Promise(async (resolve, reject) => {
                        const fileToBackup = await getFile(filePath).catch(() => null);
                        const performDeleteTransaction = (backupDone = false) => {
                            const transaction = db.transaction(DBManager.STORE_NAME, 'readwrite');
                            transaction.objectStore(DBManager.STORE_NAME).delete(filePath);
                            transaction.oncomplete = () => { console.log(`API: –§–∞–π–ª ${filePath} —É–¥–∞–ª–µ–Ω.`); resolve(); };
                            transaction.onerror = (event) => { console.error(`API: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${filePath}:`, event.target.error); reject(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${event.target.error}`); };
                        };

                         if (fileToBackup && Utils.getDirectory(filePath) !=='/backup/') { // –ù–µ –±—ç–∫–∞–ø–∏–º –±—ç–∫–∞–ø—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                             console.log(`API: –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º ${filePath}...`);
                             const backupPath = Utils.createBackupPath(fileToBackup);
                             const backupData = { ...fileToBackup, filePath: backupPath, directory: '/backup/', name: Utils.getFileName(backupPath), timestamp: Date.now() };
                             // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
                             backupData.content = typeof backupData.content === 'string' ? backupData.content : JSON.stringify(backupData.content, null, 2);

                             const backupTransaction = db.transaction(DBManager.STORE_NAME, 'readwrite');
                             backupTransaction.objectStore(DBManager.STORE_NAME).put(backupData);
                             backupTransaction.oncomplete = () => { console.log(`API: –ë—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω: ${backupPath}`); performDeleteTransaction(true); };
                             backupTransaction.onerror = (event) => { console.error(`API: –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º ${filePath}:`, event.target.error); performDeleteTransaction(false); };
                         } else {
                              if(Utils.getDirectory(filePath) ==='/backup/'){
                                   console.log(`API: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –±—ç–∫–∞–ø–∞ ${filePath} (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±—ç–∫–∞–ø–∞).`);
                              } else {
                                   console.log(`API: –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.`);
                              }
                             performDeleteTransaction(false);
                         }
                    });
                }

                return { openDB, listFiles, getFile, saveFile, deleteFile };
            })();

            // ----------------------------------------------------------------------
            // --- Main Application Logic ---
            // ----------------------------------------------------------------------

            /** –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */
            function showNotification(message, type = 'success', duration = 3000) {
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.textContent = message;
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º? –ü–æ–∫–∞ –æ—á–∏—â–∞–µ–º.
                notificationsElement.innerHTML = '';
                notificationsElement.appendChild(notification);
                if (duration > 0) setTimeout(() => notification.remove(), duration);
            }

            /** –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ */
            async function renderFileList(directory) {
                currentDirectory = directory;
                currentPathElement.textContent = directory;
                fileListElement.innerHTML = '<li class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</li>';
                clearEditor(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                try {
                    const items = await FileSystemAPI.listFiles(directory);
                    fileListElement.innerHTML = '';
                    if (items.length === 0) {
                        fileListElement.innerHTML = '<li class="loading">–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞</li>';
                    } else {
                        items.forEach(item => {
                            const li = document.createElement('li');
                            li.textContent = item.name;
                            li.dataset.path = item.path;
                            li.className = item.type;
                            li.title = item.path;
                            if (item.type === 'directory') {
                                li.addEventListener('click', () => renderFileList(item.path));
                            } else {
                                li.addEventListener('click', () => loadFileIntoEditor(item.path));
                            }
                            fileListElement.appendChild(li);
                        });
                    }
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ ${directory}:`, error);
                    showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ${error}`, 'error');
                    fileListElement.innerHTML = '<li class="loading error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</li>';
                }
            }

            /** –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä */
            async function loadFileIntoEditor(filePath) {
                if (isEditorDirty && !confirm("–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")) return;
                clearEditor();
                fileContentEditor.value = '–ó–∞–≥—Ä—É–∑–∫–∞...';
                fileInfoElement.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞: ${Utils.getFileName(filePath)}`;
                selectedFilePath = filePath;
                fileContentEditor.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏

                try {
                    const fileData = await FileSystemAPI.getFile(filePath);
                    if (fileData) {
                        fileContentEditor.value = fileData.content; // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∂–µ —Å—Ç—Ä–æ–∫–∞
                        fileInfoElement.textContent = `–§–∞–π–ª: ${fileData.name} (${Utils.formatTimestamp(fileData.timestamp)})`;
                        saveButton.disabled = false;
                        deleteButton.disabled = false;
                        isEditorDirty = false;
                        fileContentEditor.disabled = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏

                        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
                        if (fileData.directory === '/agents/' && fileData.name.endsWith('.json')) {
                            applyAgentConfig(fileData.content, fileData.name);
                        } else {
                             agentConfigDisplay.style.display = 'none';
                             // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ –∞–≥–µ–Ω—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                             // activeAgentConfig = null; // –ü–æ–∫–∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —á–∞—Ç–∏—Ç—å—Å—è, –≤—ã–±—Ä–∞–≤ —Ñ–∞–π–ª —á–∞—Ç–∞
                        }
                         // –õ–æ–≥–∏–∫–∞ –¥–ª—è —á–∞—Ç–æ–≤
                         if (fileData.directory === '/chats/' && fileData.name.endsWith('.json')) {
                             loadChat(fileData);
                             chatMessageInput.disabled = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥ —á–∞—Ç–∞
                             sendMessageButton.disabled = false;
                           // fileContentEditor.disabled = true; // –ú–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —á–∞—Ç–æ–≤
                         } else {
                             currentChatFile = null;
                              chatMessageInput.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º —á–∞—Ç, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ —Ñ–∞–π–ª —á–∞—Ç–∞
                              sendMessageButton.disabled = true;
                         }

                    } else {
                        showNotification(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'error');
                        clearEditor();
                    }
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, error);
                    showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error}`, 'error');
                    clearEditor();
                }
            }

            /** –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ */
            async function saveCurrentFile() {
                if (!selectedFilePath || !isEditorDirty) {
                     showNotification(selectedFilePath ? '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' : '–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'warning', 1500);
                    return;
                }
                console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${selectedFilePath}`);
                fileStatusElement.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
                saveButton.disabled = true; deleteButton.disabled = true;
                try {
                    const content = fileContentEditor.value;
                    const savedFileData = await FileSystemAPI.saveFile(selectedFilePath, content);
                    showNotification(`–§–∞–π–ª ${Utils.getFileName(selectedFilePath)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`, 'success');
                    fileStatusElement.textContent = `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${Utils.formatTimestamp(savedFileData.timestamp)}`;
                    isEditorDirty = false;
                    fileInfoElement.textContent = `–§–∞–π–ª: ${savedFileData.name} (${Utils.formatTimestamp(savedFileData.timestamp)})`;
                    if (savedFileData.directory === '/agents/' && savedFileData.name.endsWith('.json')) {
                        applyAgentConfig(savedFileData.content, savedFileData.name);
                    }
                    if (['/core/', '/api/', '/utils/'].includes(savedFileData.directory) && savedFileData.name.endsWith('.js')) {
                       showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.', 'warning', 5000);
                    }
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${selectedFilePath}:`, error);
                    showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error}`, 'error');
                    fileStatusElement.textContent = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
                } finally {
                    if(selectedFilePath){ saveButton.disabled = false; deleteButton.disabled = false; }
                }
            }

            /** –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª */
            async function deleteCurrentFile() {
                if (!selectedFilePath) return;
                const fileName = Utils.getFileName(selectedFilePath);
                if (!confirm(`–£–¥–∞–ª–∏—Ç—å "${fileName}"? –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–∞–π–ª –∏–∑ /backup/).`)) return;
                console.log(`–£–¥–∞–ª–µ–Ω–∏–µ: ${selectedFilePath}`);
                fileStatusElement.textContent = '–£–¥–∞–ª–µ–Ω–∏–µ...';
                saveButton.disabled = true; deleteButton.disabled = true;
                try {
                    await FileSystemAPI.deleteFile(selectedFilePath);
                    showNotification(`–§–∞–π–ª "${fileName}" —É–¥–∞–ª–µ–Ω.`, 'success');
                    clearEditor();
                    await renderFileList(currentDirectory); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${selectedFilePath}:`, error);
                    showNotification(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`, 'error');
                    fileStatusElement.textContent = '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è';
                     if(selectedFilePath){ saveButton.disabled = false; deleteButton.disabled = false; } // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                }
            }

             /** –û—á–∏—â–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä */
            function clearEditor() {
                fileContentEditor.value = '';
                fileInfoElement.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞';
                fileStatusElement.textContent = '';
                saveButton.disabled = true;
                deleteButton.disabled = true;
                fileContentEditor.disabled = true;
                selectedFilePath = null;
                isEditorDirty = false;
                agentConfigDisplay.style.display = 'none';
                // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º currentChatFile –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –∑–¥–µ—Å—å
                // –ë–ª–æ–∫–∏—Ä—É–µ–º —á–∞—Ç, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ—á–∏—â–µ–Ω (–Ω–µ—Ç —Ñ–∞–π–ª–∞ —á–∞—Ç–∞)
                 if (!currentChatFile) {
                    chatMessageInput.disabled = true;
                    sendMessageButton.disabled = true;
                 }
            }

             /** –û—Ç–º–µ—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ */
            function markEditorDirty() {
                if (!isEditorDirty && selectedFilePath) {
                    isEditorDirty = true;
                    fileStatusElement.textContent = '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è';
                }
            }

            /** –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ */
             function applyAgentConfig(configContent, agentFileName) {
                 console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ ${agentFileName}`);
                 try {
                     activeAgentConfig = JSON.parse(configContent); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
                     console.log("–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞:", activeAgentConfig);
                     agentConfigData.textContent = JSON.stringify(activeAgentConfig, null, 2);
                     agentConfigDisplay.style.display = 'block';
                     showNotification(`–ö–æ–Ω—Ñ–∏–≥ ${activeAgentConfig.name || agentFileName} –∑–∞–≥—Ä—É–∂–µ–Ω.`, 'success', 2000);
                 } catch (error) {
                     console.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≥–µ–Ω—Ç–∞:", error);
                     showNotification(`–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ ${agentFileName}: ${error}`, 'error');
                     agentConfigData.textContent = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error}`;
                     agentConfigDisplay.style.display = 'block';
                     activeAgentConfig = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                 }
             }

            /** –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ */
            async function createFilePrompt() {
                if (currentDirectory === '/backup/') {
                    showNotification('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ /backup/', 'error'); return;
                }
                const fileName = prompt(`–ò–º—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ ${currentDirectory} (e.g., my_data.json):`);
                if (!fileName || !fileName.trim()) return;
                const newFilePath = currentDirectory + fileName.trim();
                 try {
                     const existing = await FileSystemAPI.getFile(newFilePath);
                     if (existing) { showNotification(`–§–∞–π–ª ${fileName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`, 'error'); return; }

                     let initialContent = '';
                     if (fileName.endsWith('.json')) initialContent = '{}';
                     if (currentDirectory === '/chats/' && fileName.endsWith('.json')) initialContent = JSON.stringify({ id: Utils.generateId(), messages: [] }, null, 2);
                     if (currentDirectory === '/agents/' && fileName.endsWith('.json')) initialContent = JSON.stringify({ id: Utils.generateId(), name: "New Agent", configurations: { model: "anthropic/claude-3-haiku" } }, null, 2);
                      if (currentDirectory === '/secrets/' && fileName.endsWith('.json')) initialContent = JSON.stringify({ id: Utils.generateId(), data: {} }, null, 2);

                     console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${newFilePath}`);
                     await FileSystemAPI.saveFile(newFilePath, initialContent);
                     showNotification(`–§–∞–π–ª ${fileName} —Å–æ–∑–¥–∞–Ω.`, 'success');
                     await renderFileList(currentDirectory);
                     await loadFileIntoEditor(newFilePath);
                 } catch (error) {
                     console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${newFilePath}:`, error);
                     showNotification(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${error}`, 'error');
                 }
            }

             // --- –õ–æ–≥–∏–∫–∞ –ß–∞—Ç–∞ ---

             /** –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Ç */
            function loadChat(chatFileData) {
                console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞:", chatFileData.filePath);
                chatHistoryElement.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞
                try {
                    const chatData = JSON.parse(chatFileData.content);
                    if (!chatData || !Array.isArray(chatData.messages)) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Ç–∞.");
                    currentChatFile = { filePath: chatFileData.filePath, messages: chatData.messages || [] }; // !! –í–∞–∂–Ω–æ: –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    currentChatFile.messages.forEach(renderChatMessage);
                    chatHistoryElement.scrollTop = chatHistoryElement.scrollHeight;
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:", error);
                    showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞: ${error}`, 'error');
                    renderChatMessage({ sender:'error', text:`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ${Utils.getFileName(chatFileData.filePath)}.`});
                    currentChatFile = null;
                }
            }

             /** –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ */
            function renderChatMessage(message) {
                const msgDiv = document.createElement('div');
                msgDiv.classList.add('chat-message', message.sender); // sender –º–æ–∂–µ—Ç –±—ã—Ç—å 'user', 'agent', 'error'
                const senderSpan = document.createElement('div');
                senderSpan.classList.add('sender');
                senderSpan.textContent = message.sender === 'user' ? '–í—ã' : (message.sender === 'agent' ? (activeAgentConfig?.name || '–ê–≥–µ–Ω—Ç') : '–°–∏—Å—Ç–µ–º–∞');
                const textNode = document.createElement('div');
                textNode.textContent = message.text; // TODO: Sanitize HTML?
                msgDiv.appendChild(senderSpan);
                msgDiv.appendChild(textNode);
                if(message.timestamp) {
                    const timeSpan = document.createElement('div');
                    timeSpan.classList.add('timestamp');
                    timeSpan.textContent = Utils.formatTimestamp(message.timestamp);
                    msgDiv.appendChild(timeSpan);
                }
                chatHistoryElement.appendChild(msgDiv);
            }

            /** –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API */
            async function sendMessage() {
                const messageText = chatMessageInput.value.trim();
                const apiKey = apiKeyInput.value.trim();

                if (!messageText) return;
                if (!currentChatFile) { showNotification("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —á–∞—Ç–∞.", 'error'); return; }
                if (!apiKey) { showNotification("–í–≤–µ–¥–∏—Ç–µ VseGPT API –∫–ª—é—á.", 'error'); apiKeyInput.focus(); return; }
                 if (!activeAgentConfig || !activeAgentConfig.configurations || !activeAgentConfig.configurations.model) {
                     showNotification("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é (e.g., /agents/example-agent.json)", 'error');
                     return;
                 }

                 chatMessageInput.disabled = true; sendMessageButton.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞

                // 1. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userMessage = { sender: 'user', text: messageText, timestamp: Date.now() };
                currentChatFile.messages.push(userMessage);
                renderChatMessage(userMessage);
                chatMessageInput.value = '';
                chatHistoryElement.scrollTop = chatHistoryElement.scrollHeight;

                // 2. –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ API
                 const apiEndpoint = "https://api.vsegpt.ru/v1/chat/completions";
                 const model = activeAgentConfig.configurations.model;
                 const temperature = activeAgentConfig.configurations.temperature || 0.7;
                 const max_tokens_config = activeAgentConfig.configurations.max_tokens || 1000; // –£–º–µ–Ω—å—à–∏–ª –¥–µ—Ñ–æ–ª—Ç

                 // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å system prompt –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å)
                 const apiMessages = [];
                 // if (activeAgentConfig.configurations.system_prompt) {
                 //     apiMessages.push({ role: "system", content: activeAgentConfig.configurations.system_prompt });
                 // }
                 // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
                 const historyToSend = currentChatFile.messages.slice(-10); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π (user/agent)
                 historyToSend.forEach(msg => {
                      if(msg.sender === 'user' || msg.sender === 'agent'){ // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                           apiMessages.push({ role: msg.sender === 'user' ? 'user' : 'assistant', content: msg.text });
                      }
                 });


                 const requestBody = {
                     model: model,
                     messages: apiMessages, // –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                     temperature: temperature,
                     n: 1,
                     max_tokens: max_tokens_config,
                 };

                 console.log("API Request Body:", JSON.stringify(requestBody, null, 2));
                 showNotification("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI...", "success", 1500);

                 try {
                     const response = await fetch(apiEndpoint, {
                         method: 'POST',
                         headers: {
                             'Content-Type': 'application/json',
                            'Authorization': `Bearer ${apiKey}`,
                            'X-Title': "SmartAssistantSF" // Optional header
                         },
                         body: JSON.stringify(requestBody)
                     });

                     if (!response.ok) {
                          // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ –æ—Ç API
                         let errorData = null;
                         try { errorData = await response.json(); } catch (e) {}
                         console.error("API Error Response:", errorData);
                         throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}. ${errorData?.error?.message || ''}`);
                     }

                     const responseData = await response.json();
                     console.log("API Response:", responseData);

                     const agentResponseText = responseData.choices?.[0]?.message?.content?.trim();

                     if (!agentResponseText) {
                         throw new Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.");
                     }

                      // 3. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
                     const agentMessage = { sender: 'agent', text: agentResponseText, timestamp: Date.now() };
                     currentChatFile.messages.push(agentMessage);
                     renderChatMessage(agentMessage);

                 } catch (error) {
                     console.error("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API:", error);
                     const errorMessage = { sender: 'error', text: `–û—à–∏–±–∫–∞: ${error.message}`, timestamp: Date.now() };
                     currentChatFile.messages.push(errorMessage); // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                     renderChatMessage(errorMessage);
                     showNotification(`–û—à–∏–±–∫–∞ API: ${error.message}`, 'error', 5000);
                 } finally {
                     chatHistoryElement.scrollTop = chatHistoryElement.scrollHeight;
                     chatMessageInput.disabled = false; sendMessageButton.disabled = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
                     // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–∞—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, —Ç.–∫. –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é)
                     await saveCurrentChat();
                }
            }

            /** –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç */
            async function saveCurrentChat() {
                if (!currentChatFile) return;
                console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–∞: ${currentChatFile.filePath}`);
                try {
                    const chatDataToSave = {
                        id: Utils.getFileName(currentChatFile.filePath).replace('.json', ''),
                        messages: currentChatFile.messages // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
                    };
                    // –í—ã–∑—ã–≤–∞–µ–º saveFile –±–µ–∑ await, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    FileSystemAPI.saveFile(currentChatFile.filePath, chatDataToSave)
                        .then(savedData => {
                            console.log(`–ß–∞—Ç ${currentChatFile.filePath} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä, –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç —Ç–∞–º
                            if (selectedFilePath === currentChatFile.filePath) {
                                isEditorDirty = false; // –°—á–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
                                fileContentEditor.value = savedData.content;
                                fileInfoElement.textContent = `–§–∞–π–ª: ${savedData.name} (${Utils.formatTimestamp(savedData.timestamp)})`;
                                fileStatusElement.textContent = `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${Utils.formatTimestamp(savedData.timestamp)}`;
                            }
                        })
                        .catch(err => {
                             console.error(`–§–æ–Ω–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞ ${currentChatFile.filePath}:`, err);
                             // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∏—Ö–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                             // showNotification(`–§–æ–Ω–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞: ${err}`, 'error', 2000);
                        });
                } catch (error) { // –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ –ø—Ä–∏ JSON.stringify, –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ
                    console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞ ${currentChatFile.filePath}:`, error);
                    showNotification(`–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞: ${error}`, 'error');
                }
            }


            // --- –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π ---
            saveButton.addEventListener('click', saveCurrentFile);
            deleteButton.addEventListener('click', deleteCurrentFile);
            fileContentEditor.addEventListener('input', markEditorDirty);
            rootButton.addEventListener('click', () => renderFileList('/'));
            createFileButton.addEventListener('click', createFilePrompt);
            chatMessageInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') sendMessage(); });
            sendMessageButton.addEventListener('click', sendMessage);

            // --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
            try {
                await FileSystemAPI.openDB();
                showNotification('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.', 'success', 1500);
                await renderFileList('/');
                clearEditor();
             } catch (error) {
                console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
                showNotification(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}.`, 'error', 0);
                 fileListElement.innerHTML = '<li class="loading error">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î</li>';
            }
             console.log('Smart Assistant (SF): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');

        })(); // –ö–æ–Ω–µ—Ü IIFE
    </script>
</body>
</html>
